{"version":3,"sources":["component/DisplayPassword/DisplayPassword.module.scss","component/CheckboxCraft/CheckboxCraft.module.scss","component/DisplaySettings/DisplaySettings.module.scss","component/InputRange/InputRange.module.scss","component/Button/Button.module.scss","component/InputDisplay/InputDisplay.module.scss","component/Boxdisplay/Boxdisplay.module.scss","component/Title/Title.module.scss","component/App/App.module.scss","redux/password-reducer.ts","utils/randomFunctions.ts","component/Button/index.tsx","component/InputDisplay/index.tsx","component/InputRange/index.tsx","component/DisplayPassword/index.tsx","component/CheckboxCraft/index.tsx","component/DisplaySettings/index.tsx","component/Boxdisplay/index.tsx","component/Title/index.tsx","component/App/index.tsx","redux/store.ts","index.tsx"],"names":["module","exports","initialState","checkBottons","title","checked","id","v4","maxValue","inputValue","password","createSlice","name","reducers","setValueAC","state","payload","setIsCheckedAC","elem","find","i","isChecked","actions","passwordReducer","reducer","getRandomOne","data","randoms","map","push","String","fromCharCode","Math","floor","random","toString","length","Button","React","memo","props","children","onClick","onClickHandler","e","className","s","btn","InputDisplay","onChange","value","input","type","InputRange","max","mainStyles","wrap","join","wrap__output","min","DisplayPassword","dispatch","useDispatch","useState","rerenderPages","setRerenderPages","useSelector","arr","renderSymbols","useMemo","reduce","acc","onChangeInputRangeHandler","useCallback","currentTarget","onChangeInputDisplayHandler","displaypassword","displaypassword__symbols","displaypassword__group","displaypassword__inputDisplay","displaypassword__inputRange","text","CheckboxCraft","disabled","checkbox","checkbox__title","checkbox__input","DisplaySettings","rendercheckBottons","key","displaysettings__element","displaysettings__checkbox","displaysettings","Boxdisplay","boxdisplay","Title","App","app","combineReducers","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbb8a833.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displaypassword\":\"DisplayPassword_displaypassword__1Yzmb\",\"displaypassword__symbols\":\"DisplayPassword_displaypassword__symbols__vs4rO\",\"displaypassword__group\":\"DisplayPassword_displaypassword__group__lK3jZ\",\"displaypassword__inputRange\":\"DisplayPassword_displaypassword__inputRange__7SJXP\",\"displaypassword__inputDisplay\":\"DisplayPassword_displaypassword__inputDisplay__2Zhzk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CheckboxCraft_checkbox__17iwN\",\"checkbox__title\":\"CheckboxCraft_checkbox__title__3Xu5e\",\"checkbox__input\":\"CheckboxCraft_checkbox__input__2DOPV\",\"checkbox__input-craft\":\"CheckboxCraft_checkbox__input-craft__1LL_w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displaysettings\":\"DisplaySettings_displaysettings__3RgSn\",\"displaysettings__list\":\"DisplaySettings_displaysettings__list__1lMgp\",\"displaysettings__checkbox\":\"DisplaySettings_displaysettings__checkbox__2bOsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"InputRange_wrap__-qkZ2\",\"wrap__output\":\"InputRange_wrap__output__2UGRU\",\"input\":\"InputRange_input__3DioZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3un9t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputDisplay_input__37PjG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxdisplay\":\"Boxdisplay_boxdisplay__2aI3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1TqVk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3XAcC\"};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { v4 } from \"uuid\";\r\n\r\nexport type CheckBottonsType = {\r\n    title: string\r\n    checked: boolean\r\n    id: string\r\n}\r\n\r\n\r\nconst initialState = {\r\n    checkBottons: [\r\n        { title: 'Numbers', checked: true, id: v4() },\r\n        { title: 'Letters', checked: false, id: v4() },\r\n        { title: 'Symbols', checked: false, id: v4() },\r\n        { title: 'Uppercase', checked: false, id: v4() },\r\n        { title: 'Lowercase', checked: false, id: v4() },\r\n    ] as Array<CheckBottonsType>,\r\n    maxValue: 107,\r\n    inputValue: 4,\r\n}\r\n\r\nconst password = createSlice({\r\n    name: 'password',\r\n    initialState,\r\n    reducers: {\r\n        setValueAC(state, { payload }: PayloadAction<number>) {\r\n            state.inputValue = payload\r\n        },\r\n        setIsCheckedAC(state, { payload }: PayloadAction<{ isChecked: boolean, id: string }>) {\r\n            const elem = state.checkBottons.find(i => i.id === payload.id)\r\n            if (elem) {\r\n                elem.checked = payload.isChecked\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\n\r\nexport const {\r\n    setValueAC,\r\n    setIsCheckedAC,\r\n} = password.actions\r\nexport const passwordReducer = password.reducer","import { CheckBottonsType } from '../redux/password-reducer';\r\n\r\nconst getRandomLetters = () => {\r\n    return String.fromCharCode(Math.floor(Math.random() * 52) + 65)\r\n}\r\nconst getRandomLower = () => {\r\n    return String.fromCharCode(Math.floor(Math.random() * 26) + 97)\r\n}\r\nconst getRandomUpper = () => {\r\n    return String.fromCharCode(Math.floor(Math.random() * 26) + 65)\r\n}\r\nconst getRandomNumber = () => {\r\n    return String.fromCharCode(Math.floor(Math.random() * 10) + 48).toString()\r\n}\r\nconst getRandomSymbols = () => {\r\n    const symbols = '!@#$%^&*(){}[]=<>/,.'\r\n    return symbols[Math.floor(Math.random() * symbols.length)];\r\n}\r\n\r\nexport const getRandomOne = (data: Array<CheckBottonsType>) => {\r\n\r\n    let randoms: Array<string> = [];\r\n\r\n    /* eslint-disable */\r\n    let empty: Array<number | string> = data.map(i => {\r\n        if (i.title === 'Numbers' && i.checked) {\r\n            randoms.push(getRandomNumber())\r\n        }\r\n        if (i.title === 'Letters' && i.checked) {\r\n            randoms.push(getRandomLetters())\r\n        }\r\n        if (i.title === 'Symbols' && i.checked) {\r\n            randoms.push(getRandomSymbols())\r\n        }\r\n        if (i.title === 'Uppercase' && i.checked) {\r\n            randoms.push(getRandomUpper())\r\n        }\r\n        if (i.title === 'Lowercase' && i.checked) {\r\n            randoms.push(getRandomLower())\r\n        }\r\n        return i.id\r\n    })\r\n    return randoms[Math.floor(Math.random() * randoms.length)]\r\n}\r\n","import React, { MouseEvent } from 'react'\r\nimport s from './Button.module.scss'\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onClick?: (e: MouseEvent<HTMLButtonElement>) => void\r\n}\r\n\r\nexport const Button: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const { title, children, onClick } = props\r\n\r\n    const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onClick && onClick(e)\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={s.btn}\r\n            onClick={(e) => onClickHandler(e)}\r\n        >\r\n            {\r\n                children ? children : title\r\n            }\r\n        </button>\r\n    )\r\n})\r\n","import React, { ChangeEvent } from 'react'\r\nimport s from './InputDisplay.module.scss'\r\n\r\ntype PropsType = {\r\n    className?: string\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const InputDisplay: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const { className, onChange, value } = props\r\n\r\n    return (\r\n        <input\r\n            className={s.input + `${className ? ' ' + className : ''}`}\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n})\r\n","import React, { ChangeEvent } from 'react'\r\nimport s from './InputRange.module.scss'\r\n\r\ntype PropsType = {\r\n    className?: string\r\n    value: number\r\n    max?: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const InputRange: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const { className, value, onChange, max = 100 } = props\r\n\r\n    const mainStyles = [s.wrap]\r\n    if (className) mainStyles.push(className)\r\n\r\n    return (\r\n        <div className={mainStyles.join(\" \")}>\r\n            <output className={s.wrap__output} >\r\n                {\r\n                    value\r\n                }\r\n            </output>\r\n            <input\r\n                className={s.input}\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max={max}\r\n                value={value}\r\n                title={value.toString()}\r\n                onChange={onChange}\r\n            />\r\n        </div >\r\n\r\n    )\r\n})\r\n","import React, { ChangeEvent, MouseEvent, useCallback, useMemo, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setValueAC } from '../../redux/password-reducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { getRandomOne } from '../../utils/randomFunctions'\r\nimport { Button } from '../Button'\r\nimport { InputDisplay } from '../InputDisplay'\r\nimport { InputRange } from '../InputRange'\r\nimport s from './DisplayPassword.module.scss'\r\nimport CopyToClipboard from 'react-copy-to-clipboard';\r\n\r\nexport const DisplayPassword = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [rerenderPages, setRerenderPages] = useState(0)\r\n    const value = useSelector((state: AppStateType) => state.passwordReducer.inputValue)\r\n    const maxValue = useSelector((state: AppStateType) => state.passwordReducer.maxValue)\r\n    const data = useSelector((state: AppStateType) => state.passwordReducer.checkBottons)\r\n\r\n    let arr: number[] = []\r\n    for (let i = 0; i < value; i++) {\r\n        arr.push(i)\r\n    }\r\n    const renderSymbols = useMemo(() => {\r\n        return arr.reduce((acc, i) => acc += getRandomOne(data), '')\r\n    }, [arr, data])\r\n\r\n    const onChangeInputRangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setValueAC(+e.currentTarget.value))\r\n    }, [dispatch])\r\n\r\n    const onChangeInputDisplayHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value > maxValue) {\r\n            dispatch(setValueAC(maxValue))\r\n        } else {\r\n            dispatch(setValueAC(+e.currentTarget.value))\r\n        }\r\n    }, [dispatch, maxValue])\r\n\r\n    const onClickGeneratorHandler = (e: MouseEvent<HTMLButtonElement>) => { setRerenderPages(rerenderPages + 1) }\r\n\r\n    return (\r\n        <div className={s.displaypassword}>\r\n            <div className={s.displaypassword__symbols}>\r\n                {\r\n                    renderSymbols\r\n                }\r\n            </div>\r\n            <div className={s.displaypassword__group}>\r\n                <InputDisplay className={s.displaypassword__inputDisplay} value={value} onChange={onChangeInputDisplayHandler} />\r\n                <InputRange className={s.displaypassword__inputRange} value={value} max={maxValue} onChange={onChangeInputRangeHandler} />\r\n                <CopyToClipboard text={renderSymbols} >\r\n                    <Button title={\"Copy\"} />\r\n                </CopyToClipboard>\r\n                <Button title={\"Generator\"} onClick={onClickGeneratorHandler} />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, { ChangeEvent } from 'react'\r\nimport s from './CheckboxCraft.module.scss'\r\n\r\ntype PropsType = {\r\n    className?: string\r\n    title: string\r\n    disabled?: boolean\r\n    checked: boolean\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const CheckboxCraft: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const { className, title, disabled, checked, onChange } = props\r\n\r\n    return (\r\n        <label className={s.checkbox + `${className ? ' ' + className : ''}`}>\r\n            <span className={s.checkbox__title}>{title}</span>\r\n            <input className={s.checkbox__input} type=\"checkbox\" disabled={disabled} checked={checked} onChange={onChange} />\r\n            <span className={s['checkbox__input-craft']}></span>\r\n        </label>\r\n    )\r\n})\r\n","import React, { ChangeEvent, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/store';\r\nimport { CheckboxCraft } from '../CheckboxCraft';\r\nimport { setIsCheckedAC } from '../../redux/password-reducer'\r\nimport s from './DisplaySettings.module.scss'\r\n\r\nexport const DisplaySettings = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const checkBottons = useSelector((state: AppStateType) => state.passwordReducer.checkBottons)\r\n\r\n    const rendercheckBottons = useMemo(() => checkBottons.map(i => {\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            dispatch(setIsCheckedAC({ isChecked: e.currentTarget.checked, id: i.id }))\r\n        }\r\n        return (\r\n            <li\r\n                key={i.id}\r\n                className={s.displaysettings__element}\r\n            >\r\n                <CheckboxCraft title={i.title} checked={i.checked} onChange={onChangeHandler} className={s.displaysettings__checkbox}/>\r\n            </li>\r\n        )\r\n    }), [checkBottons, dispatch])\r\n\r\n    return (\r\n        <div className={s.displaysettings}>\r\n            <ul className={s['displaysettings__list']}>\r\n                {\r\n                    rendercheckBottons\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { DisplayPassword } from '../DisplayPassword'\r\nimport { DisplaySettings } from '../DisplaySettings'\r\nimport s from './Boxdisplay.module.scss'\r\n\r\nexport const Boxdisplay = () => {\r\n\r\n\r\n    return (\r\n        <div className={s.boxdisplay}>\r\n            <DisplayPassword />\r\n            <DisplaySettings />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport s from './Title.module.scss'\r\n\r\ntype PropsType = {\r\n    title: string\r\n}\r\n\r\nexport const Title: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const { title } = props\r\n\r\n    return (\r\n        <div className={s.title}>\r\n            {title}\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport { Boxdisplay } from '../Boxdisplay';\r\nimport { Title } from '../Title';\r\nimport s from './App.module.scss';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div className={s.app}>\r\n      <Title title=\"Generator password\" />\r\n      <Boxdisplay />\r\n    </div>\r\n  );\r\n}\r\n","import { passwordReducer } from './password-reducer';\r\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst reducers = combineReducers({\r\n    passwordReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nconst store = configureStore({\r\n    reducer: reducers\r\n})\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './component/App';\r\nimport './index.css';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}